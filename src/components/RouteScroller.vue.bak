<template>
  <vueper-slides
    :autoplay="false"
    :arrows="true"
    :arrows-outside="true"
    :bullets="false"
    :fixed-height="true"
    ref="slider"
    class="no-shadow bg-texture footer"
    :style="'box-shadow: inset 0 0 1rem 0.5rem var(--shadow)'"
    @previous="(e) => console.log(e)"
    @next="(e) => console.log(e)"
  >
    <vueper-slide
      v-for="(slide, i) in slides"
      :key="i"
      :title="slide.title"
      :href="slide.href"
    >
    </vueper-slide>
  </vueper-slides>
</template>
<script setup>
import { ref, watchEffect, watch, onMounted, onUnmounted, computed } from 'vue';
import { VueperSlides, VueperSlide } from 'vueperslides';
import 'vueperslides/dist/vueperslides.css';
import { useRouter, useRoute } from 'vue-router';

const sliderRef = ref(null)
const router = useRouter();
const route = useRoute();

function logEvents (eventName, params) {
  sliderRef.value.events += `<strong>${eventName}</strong>, ${JSON.stringify(params)}<br>`
}

const slides = ref([
  { title: '🏠', href: '/' },
  { title: '🗃️', href: '/services' },
  { title: '🏆', href: '/company' },
  { title: '📞', href: '/contacts' },
]);

// Reactive reference for the active title
const activeTitle = ref('');

// Utility: Update `activeTitle` based on the route path
function syncActiveTitleWithRoute() {
  const matchingSlide = slides.value.find((slide) => slide.href === route.path);
  if (matchingSlide) {
    activeTitle.value = matchingSlide.title;
  }
}

// Utility: Update the route when `activeTitle` changes
function syncRouteWithActiveTitle() {
  const matchingSlide = slides.value.find((slide) => slide.title === activeTitle.value);
  if (matchingSlide && route.path !== matchingSlide.href) {
    router.push(matchingSlide.href);
  }
}

// Watch route changes to update `activeTitle`
watch(
  () => route.path,
  () => {
    syncActiveTitleWithRoute();
  },
  { immediate: true }
);

// Watch `activeTitle` to update the route
watch(
  activeTitle,
  () => {
    syncRouteWithActiveTitle();
  }
);

// Periodic title update for DOM state (if slides change dynamically)
let interval;
onMounted(() => {
  syncActiveTitleWithRoute();

  interval = setInterval(() => {
    const activeElement = document.querySelector('.footer .vueperslide--active .vueperslide__title');
    if (activeElement) {
      activeTitle.value = activeElement.innerText.trim();
    }
  }, 100); // Adjust interval as needed
});

onUnmounted(() => {
  if (interval) clearInterval(interval);
});
</script>

<style lang="scss">
.footer .vueperslides--fixed-height {
  width: 2vw;
  position: absolute;
  top: 1ch;
  left: 29ch;
  height: calc(2 * var(--main-em));
}

.footer .vueperslides {
}

.footer .vueperslide__content {
}

.footer .vueperslide__title {
  line-height: calc(2 * var(--main-em));
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 90%;
  text-align: center;
  width: 2vw;
  border: 1px solid red;
}
</style>
